// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edg-ml-fw2-msg.proto

#ifndef PROTOBUF_edg_2dml_2dfw2_2dmsg_2eproto__INCLUDED
#define PROTOBUF_edg_2dml_2dfw2_2dmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace edgmlfw2msg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
void protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto();
void protobuf_ShutdownFile_edg_2dml_2dfw2_2dmsg_2eproto();

class Agent;
class Node;
class Node_Face;

// ===================================================================

class Node_Face : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgmlfw2msg.Node.Face) */ {
 public:
  Node_Face();
  virtual ~Node_Face();

  Node_Face(const Node_Face& from);

  inline Node_Face& operator=(const Node_Face& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node_Face& default_instance();

  void Swap(Node_Face* other);

  // implements Message ----------------------------------------------

  inline Node_Face* New() const { return New(NULL); }

  Node_Face* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node_Face& from);
  void MergeFrom(const Node_Face& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node_Face* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double feature1 = 1;
  bool has_feature1() const;
  void clear_feature1();
  static const int kFeature1FieldNumber = 1;
  double feature1() const;
  void set_feature1(double value);

  // optional double feature2 = 2;
  bool has_feature2() const;
  void clear_feature2();
  static const int kFeature2FieldNumber = 2;
  double feature2() const;
  void set_feature2(double value);

  // optional int32 face_id = 3;
  bool has_face_id() const;
  void clear_face_id();
  static const int kFaceIdFieldNumber = 3;
  ::google::protobuf::int32 face_id() const;
  void set_face_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:edgmlfw2msg.Node.Face)
 private:
  inline void set_has_feature1();
  inline void clear_has_feature1();
  inline void set_has_feature2();
  inline void clear_has_feature2();
  inline void set_has_face_id();
  inline void clear_has_face_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double feature1_;
  double feature2_;
  ::google::protobuf::int32 face_id_;
  friend void  protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  friend void protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  friend void protobuf_ShutdownFile_edg_2dml_2dfw2_2dmsg_2eproto();

  void InitAsDefaultInstance();
  static Node_Face* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgmlfw2msg.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Node_Face Face;

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double ext_feature = 2;
  bool has_ext_feature() const;
  void clear_ext_feature();
  static const int kExtFeatureFieldNumber = 2;
  double ext_feature() const;
  void set_ext_feature(double value);

  // repeated .edgmlfw2msg.Node.Face faces = 3;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 3;
  const ::edgmlfw2msg::Node_Face& faces(int index) const;
  ::edgmlfw2msg::Node_Face* mutable_faces(int index);
  ::edgmlfw2msg::Node_Face* add_faces();
  ::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face >&
      faces() const;

  // optional bool done = 4;
  bool has_done() const;
  void clear_done();
  static const int kDoneFieldNumber = 4;
  bool done() const;
  void set_done(bool value);

  // @@protoc_insertion_point(class_scope:edgmlfw2msg.Node)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ext_feature();
  inline void clear_has_ext_feature();
  inline void set_has_done();
  inline void clear_has_done();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double ext_feature_;
  ::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face > faces_;
  bool done_;
  friend void  protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  friend void protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  friend void protobuf_ShutdownFile_edg_2dml_2dfw2_2dmsg_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Agent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:edgmlfw2msg.Agent) */ {
 public:
  Agent();
  virtual ~Agent();

  Agent(const Agent& from);

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Agent& default_instance();

  void Swap(Agent* other);

  // implements Message ----------------------------------------------

  inline Agent* New() const { return New(NULL); }

  Agent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Agent& from);
  void MergeFrom(const Agent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Agent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:edgmlfw2msg.Agent)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  friend void protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  friend void protobuf_ShutdownFile_edg_2dml_2dfw2_2dmsg_2eproto();

  void InitAsDefaultInstance();
  static Agent* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Face

// optional double feature1 = 1;
inline bool Node_Face::has_feature1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node_Face::set_has_feature1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node_Face::clear_has_feature1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node_Face::clear_feature1() {
  feature1_ = 0;
  clear_has_feature1();
}
inline double Node_Face::feature1() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.Face.feature1)
  return feature1_;
}
inline void Node_Face::set_feature1(double value) {
  set_has_feature1();
  feature1_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.Face.feature1)
}

// optional double feature2 = 2;
inline bool Node_Face::has_feature2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node_Face::set_has_feature2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node_Face::clear_has_feature2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node_Face::clear_feature2() {
  feature2_ = 0;
  clear_has_feature2();
}
inline double Node_Face::feature2() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.Face.feature2)
  return feature2_;
}
inline void Node_Face::set_feature2(double value) {
  set_has_feature2();
  feature2_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.Face.feature2)
}

// optional int32 face_id = 3;
inline bool Node_Face::has_face_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node_Face::set_has_face_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node_Face::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node_Face::clear_face_id() {
  face_id_ = 0;
  clear_has_face_id();
}
inline ::google::protobuf::int32 Node_Face::face_id() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.Face.face_id)
  return face_id_;
}
inline void Node_Face::set_face_id(::google::protobuf::int32 value) {
  set_has_face_id();
  face_id_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.Face.face_id)
}

// -------------------------------------------------------------------

// Node

// required string id = 1;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.id)
}
inline void Node::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgmlfw2msg.Node.id)
}
inline void Node::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgmlfw2msg.Node.id)
}
inline ::std::string* Node::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:edgmlfw2msg.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:edgmlfw2msg.Node.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:edgmlfw2msg.Node.id)
}

// optional double ext_feature = 2;
inline bool Node::has_ext_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_ext_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_ext_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_ext_feature() {
  ext_feature_ = 0;
  clear_has_ext_feature();
}
inline double Node::ext_feature() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.ext_feature)
  return ext_feature_;
}
inline void Node::set_ext_feature(double value) {
  set_has_ext_feature();
  ext_feature_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.ext_feature)
}

// repeated .edgmlfw2msg.Node.Face faces = 3;
inline int Node::faces_size() const {
  return faces_.size();
}
inline void Node::clear_faces() {
  faces_.Clear();
}
inline const ::edgmlfw2msg::Node_Face& Node::faces(int index) const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.faces)
  return faces_.Get(index);
}
inline ::edgmlfw2msg::Node_Face* Node::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:edgmlfw2msg.Node.faces)
  return faces_.Mutable(index);
}
inline ::edgmlfw2msg::Node_Face* Node::add_faces() {
  // @@protoc_insertion_point(field_add:edgmlfw2msg.Node.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face >*
Node::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:edgmlfw2msg.Node.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face >&
Node::faces() const {
  // @@protoc_insertion_point(field_list:edgmlfw2msg.Node.faces)
  return faces_;
}

// optional bool done = 4;
inline bool Node::has_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_done() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_done() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_done() {
  done_ = false;
  clear_has_done();
}
inline bool Node::done() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.done)
  return done_;
}
inline void Node::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.done)
}

// -------------------------------------------------------------------

// Agent

// required int32 status = 1;
inline bool Agent::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Agent::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Agent::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Agent::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Agent::status() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Agent.status)
  return status_;
}
inline void Agent::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Agent.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace edgmlfw2msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_edg_2dml_2dfw2_2dmsg_2eproto__INCLUDED
