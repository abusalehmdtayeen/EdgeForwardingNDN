// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edg-ml-fw2-msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "edg-ml-fw2-msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace edgmlfw2msg {

namespace {

const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Agent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto() {
  protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "edg-ml-fw2-msg.proto");
  GOOGLE_CHECK(file != NULL);
  Node_descriptor_ = file->message_type(0);
  static const int Node_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, ext_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, done_),
  };
  Node_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      -1,
      -1,
      sizeof(Node),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
      -1);
  Node_Face_descriptor_ = Node_descriptor_->nested_type(0);
  static const int Node_Face_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Face, feature1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Face, feature2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Face, face_id_),
  };
  Node_Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Node_Face_descriptor_,
      Node_Face::default_instance_,
      Node_Face_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Face, _has_bits_[0]),
      -1,
      -1,
      sizeof(Node_Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node_Face, _internal_metadata_),
      -1);
  Agent_descriptor_ = file->message_type(1);
  static const int Agent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, status_),
  };
  Agent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Agent_descriptor_,
      Agent::default_instance_,
      Agent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _has_bits_[0]),
      -1,
      -1,
      sizeof(Agent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Agent, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_edg_2dml_2dfw2_2dmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Node_Face_descriptor_, &Node_Face::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Agent_descriptor_, &Agent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_edg_2dml_2dfw2_2dmsg_2eproto() {
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Node_Face::default_instance_;
  delete Node_Face_reflection_;
  delete Agent::default_instance_;
  delete Agent_reflection_;
}

void protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024edg-ml-fw2-msg.proto\022\013edgmlfw2msg\"\231\001\n\004"
    "Node\022\n\n\002id\030\001 \002(\t\022\023\n\013ext_feature\030\002 \001(\001\022%\n"
    "\005faces\030\003 \003(\0132\026.edgmlfw2msg.Node.Face\022\014\n\004"
    "done\030\004 \001(\010\032;\n\004Face\022\020\n\010feature1\030\001 \001(\001\022\020\n\010"
    "feature2\030\002 \001(\001\022\017\n\007face_id\030\003 \001(\005\"\027\n\005Agent"
    "\022\016\n\006status\030\001 \002(\005", 216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "edg-ml-fw2-msg.proto", &protobuf_RegisterTypes);
  Node::default_instance_ = new Node();
  Node_Face::default_instance_ = new Node_Face();
  Agent::default_instance_ = new Agent();
  Node::default_instance_->InitAsDefaultInstance();
  Node_Face::default_instance_->InitAsDefaultInstance();
  Agent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_edg_2dml_2dfw2_2dmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_edg_2dml_2dfw2_2dmsg_2eproto {
  StaticDescriptorInitializer_edg_2dml_2dfw2_2dmsg_2eproto() {
    protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  }
} static_descriptor_initializer_edg_2dml_2dfw2_2dmsg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node_Face::kFeature1FieldNumber;
const int Node_Face::kFeature2FieldNumber;
const int Node_Face::kFaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node_Face::Node_Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:edgmlfw2msg.Node.Face)
}

void Node_Face::InitAsDefaultInstance() {
}

Node_Face::Node_Face(const Node_Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:edgmlfw2msg.Node.Face)
}

void Node_Face::SharedCtor() {
  _cached_size_ = 0;
  feature1_ = 0;
  feature2_ = 0;
  face_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node_Face::~Node_Face() {
  // @@protoc_insertion_point(destructor:edgmlfw2msg.Node.Face)
  SharedDtor();
}

void Node_Face::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Node_Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node_Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_Face_descriptor_;
}

const Node_Face& Node_Face::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  return *default_instance_;
}

Node_Face* Node_Face::default_instance_ = NULL;

Node_Face* Node_Face::New(::google::protobuf::Arena* arena) const {
  Node_Face* n = new Node_Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node_Face::Clear() {
// @@protoc_insertion_point(message_clear_start:edgmlfw2msg.Node.Face)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Node_Face, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Node_Face*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(feature1_, face_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Node_Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:edgmlfw2msg.Node.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double feature1 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &feature1_)));
          set_has_feature1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_feature2;
        break;
      }

      // optional double feature2 = 2;
      case 2: {
        if (tag == 17) {
         parse_feature2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &feature2_)));
          set_has_feature2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_face_id;
        break;
      }

      // optional int32 face_id = 3;
      case 3: {
        if (tag == 24) {
         parse_face_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &face_id_)));
          set_has_face_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:edgmlfw2msg.Node.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:edgmlfw2msg.Node.Face)
  return false;
#undef DO_
}

void Node_Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:edgmlfw2msg.Node.Face)
  // optional double feature1 = 1;
  if (has_feature1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->feature1(), output);
  }

  // optional double feature2 = 2;
  if (has_feature2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->feature2(), output);
  }

  // optional int32 face_id = 3;
  if (has_face_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->face_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:edgmlfw2msg.Node.Face)
}

::google::protobuf::uint8* Node_Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:edgmlfw2msg.Node.Face)
  // optional double feature1 = 1;
  if (has_feature1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->feature1(), target);
  }

  // optional double feature2 = 2;
  if (has_feature2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->feature2(), target);
  }

  // optional int32 face_id = 3;
  if (has_face_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->face_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:edgmlfw2msg.Node.Face)
  return target;
}

int Node_Face::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:edgmlfw2msg.Node.Face)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double feature1 = 1;
    if (has_feature1()) {
      total_size += 1 + 8;
    }

    // optional double feature2 = 2;
    if (has_feature2()) {
      total_size += 1 + 8;
    }

    // optional int32 face_id = 3;
    if (has_face_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->face_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node_Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:edgmlfw2msg.Node.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Node_Face* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node_Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:edgmlfw2msg.Node.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:edgmlfw2msg.Node.Face)
    MergeFrom(*source);
  }
}

void Node_Face::MergeFrom(const Node_Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:edgmlfw2msg.Node.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature1()) {
      set_feature1(from.feature1());
    }
    if (from.has_feature2()) {
      set_feature2(from.feature2());
    }
    if (from.has_face_id()) {
      set_face_id(from.face_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Node_Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:edgmlfw2msg.Node.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node_Face::CopyFrom(const Node_Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:edgmlfw2msg.Node.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node_Face::IsInitialized() const {

  return true;
}

void Node_Face::Swap(Node_Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node_Face::InternalSwap(Node_Face* other) {
  std::swap(feature1_, other->feature1_);
  std::swap(feature2_, other->feature2_);
  std::swap(face_id_, other->face_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node_Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_Face_descriptor_;
  metadata.reflection = Node_Face_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kIdFieldNumber;
const int Node::kExtFeatureFieldNumber;
const int Node::kFacesFieldNumber;
const int Node::kDoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:edgmlfw2msg.Node)
}

void Node::InitAsDefaultInstance() {
}

Node::Node(const Node& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:edgmlfw2msg.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext_feature_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:edgmlfw2msg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:edgmlfw2msg.Node)
  if (_has_bits_[0 / 32] & 11u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    ext_feature_ = 0;
    done_ = false;
  }
  faces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:edgmlfw2msg.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "edgmlfw2msg.Node.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ext_feature;
        break;
      }

      // optional double ext_feature = 2;
      case 2: {
        if (tag == 17) {
         parse_ext_feature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ext_feature_)));
          set_has_ext_feature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faces;
        break;
      }

      // repeated .edgmlfw2msg.Node.Face faces = 3;
      case 3: {
        if (tag == 26) {
         parse_faces:
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }

      // optional bool done = 4;
      case 4: {
        if (tag == 32) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:edgmlfw2msg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:edgmlfw2msg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:edgmlfw2msg.Node)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "edgmlfw2msg.Node.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double ext_feature = 2;
  if (has_ext_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ext_feature(), output);
  }

  // repeated .edgmlfw2msg.Node.Face faces = 3;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->faces(i), output);
  }

  // optional bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:edgmlfw2msg.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:edgmlfw2msg.Node)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "edgmlfw2msg.Node.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double ext_feature = 2;
  if (has_ext_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ext_feature(), target);
  }

  // repeated .edgmlfw2msg.Node.Face faces = 3;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->faces(i), false, target);
  }

  // optional bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:edgmlfw2msg.Node)
  return target;
}

int Node::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:edgmlfw2msg.Node)
  int total_size = 0;

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[1 / 32] & 10u) {
    // optional double ext_feature = 2;
    if (has_ext_feature()) {
      total_size += 1 + 8;
    }

    // optional bool done = 4;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .edgmlfw2msg.Node.Face faces = 3;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:edgmlfw2msg.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Node* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:edgmlfw2msg.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:edgmlfw2msg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:edgmlfw2msg.Node)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  faces_.MergeFrom(from.faces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_ext_feature()) {
      set_ext_feature(from.ext_feature());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:edgmlfw2msg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:edgmlfw2msg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  id_.Swap(&other->id_);
  std::swap(ext_feature_, other->ext_feature_);
  faces_.UnsafeArenaSwap(&other->faces_);
  std::swap(done_, other->done_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node_Face

// optional double feature1 = 1;
bool Node_Face::has_feature1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Node_Face::set_has_feature1() {
  _has_bits_[0] |= 0x00000001u;
}
void Node_Face::clear_has_feature1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Node_Face::clear_feature1() {
  feature1_ = 0;
  clear_has_feature1();
}
 double Node_Face::feature1() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.Face.feature1)
  return feature1_;
}
 void Node_Face::set_feature1(double value) {
  set_has_feature1();
  feature1_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.Face.feature1)
}

// optional double feature2 = 2;
bool Node_Face::has_feature2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Node_Face::set_has_feature2() {
  _has_bits_[0] |= 0x00000002u;
}
void Node_Face::clear_has_feature2() {
  _has_bits_[0] &= ~0x00000002u;
}
void Node_Face::clear_feature2() {
  feature2_ = 0;
  clear_has_feature2();
}
 double Node_Face::feature2() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.Face.feature2)
  return feature2_;
}
 void Node_Face::set_feature2(double value) {
  set_has_feature2();
  feature2_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.Face.feature2)
}

// optional int32 face_id = 3;
bool Node_Face::has_face_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Node_Face::set_has_face_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Node_Face::clear_has_face_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Node_Face::clear_face_id() {
  face_id_ = 0;
  clear_has_face_id();
}
 ::google::protobuf::int32 Node_Face::face_id() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.Face.face_id)
  return face_id_;
}
 void Node_Face::set_face_id(::google::protobuf::int32 value) {
  set_has_face_id();
  face_id_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.Face.face_id)
}

// -------------------------------------------------------------------

// Node

// required string id = 1;
bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.id)
}
 void Node::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:edgmlfw2msg.Node.id)
}
 void Node::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:edgmlfw2msg.Node.id)
}
 ::std::string* Node::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:edgmlfw2msg.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:edgmlfw2msg.Node.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:edgmlfw2msg.Node.id)
}

// optional double ext_feature = 2;
bool Node::has_ext_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Node::set_has_ext_feature() {
  _has_bits_[0] |= 0x00000002u;
}
void Node::clear_has_ext_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
void Node::clear_ext_feature() {
  ext_feature_ = 0;
  clear_has_ext_feature();
}
 double Node::ext_feature() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.ext_feature)
  return ext_feature_;
}
 void Node::set_ext_feature(double value) {
  set_has_ext_feature();
  ext_feature_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.ext_feature)
}

// repeated .edgmlfw2msg.Node.Face faces = 3;
int Node::faces_size() const {
  return faces_.size();
}
void Node::clear_faces() {
  faces_.Clear();
}
const ::edgmlfw2msg::Node_Face& Node::faces(int index) const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.faces)
  return faces_.Get(index);
}
::edgmlfw2msg::Node_Face* Node::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:edgmlfw2msg.Node.faces)
  return faces_.Mutable(index);
}
::edgmlfw2msg::Node_Face* Node::add_faces() {
  // @@protoc_insertion_point(field_add:edgmlfw2msg.Node.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face >*
Node::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:edgmlfw2msg.Node.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::edgmlfw2msg::Node_Face >&
Node::faces() const {
  // @@protoc_insertion_point(field_list:edgmlfw2msg.Node.faces)
  return faces_;
}

// optional bool done = 4;
bool Node::has_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Node::set_has_done() {
  _has_bits_[0] |= 0x00000008u;
}
void Node::clear_has_done() {
  _has_bits_[0] &= ~0x00000008u;
}
void Node::clear_done() {
  done_ = false;
  clear_has_done();
}
 bool Node::done() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Node.done)
  return done_;
}
 void Node::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Node.done)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Agent::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Agent::Agent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:edgmlfw2msg.Agent)
}

void Agent::InitAsDefaultInstance() {
}

Agent::Agent(const Agent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:edgmlfw2msg.Agent)
}

void Agent::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:edgmlfw2msg.Agent)
  SharedDtor();
}

void Agent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agent_descriptor_;
}

const Agent& Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edg_2dml_2dfw2_2dmsg_2eproto();
  return *default_instance_;
}

Agent* Agent::default_instance_ = NULL;

Agent* Agent::New(::google::protobuf::Arena* arena) const {
  Agent* n = new Agent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:edgmlfw2msg.Agent)
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:edgmlfw2msg.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:edgmlfw2msg.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:edgmlfw2msg.Agent)
  return false;
#undef DO_
}

void Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:edgmlfw2msg.Agent)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:edgmlfw2msg.Agent)
}

::google::protobuf::uint8* Agent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:edgmlfw2msg.Agent)
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:edgmlfw2msg.Agent)
  return target;
}

int Agent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:edgmlfw2msg.Agent)
  int total_size = 0;

  // required int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Agent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:edgmlfw2msg.Agent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Agent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Agent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:edgmlfw2msg.Agent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:edgmlfw2msg.Agent)
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:edgmlfw2msg.Agent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Agent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:edgmlfw2msg.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:edgmlfw2msg.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Agent::Swap(Agent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Agent::InternalSwap(Agent* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Agent_descriptor_;
  metadata.reflection = Agent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Agent

// required int32 status = 1;
bool Agent::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Agent::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void Agent::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void Agent::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 Agent::status() const {
  // @@protoc_insertion_point(field_get:edgmlfw2msg.Agent.status)
  return status_;
}
 void Agent::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:edgmlfw2msg.Agent.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace edgmlfw2msg

// @@protoc_insertion_point(global_scope)
